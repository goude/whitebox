// Generated by SolidPython 0.4.2 on 2019-11-18 23:20:18
$fn = 48;

union() {
	difference() {
		translate(v = [0, 0, 0]) {
			translate(v = [0, 0, 0]);
			difference(){
				translate(v = [0, 0, 0]) {
					translate(v = [0, 0, 0]);
					difference() {
						translate(v = [0, 0, 0]) {
							cube(size = [80.0000000000, 50.0000000000, 1.0000000000]);
						}
					}
				}
				/* Holes Below*/
				translate(v = [0, 0, 0]){
					union(){
						translate(v = [0, 5.0000000000, 0]) {
							translate(v = [5.0000000000, 0, 0]) {
								translate(v = [0, 0, 0]) {
									cube(size = [70.0000000000, 40.0000000000, 1.0000000000]);
								}
							}
						}
					}
				} /* End Holes */ 
			}
		}
		translate(v = [0, 0, 0.5000000000]) {
			translate(v = [0, 4.5000000000, 0]) {
				translate(v = [4.5000000000, 0, 0]) {
					translate(v = [0, 0, 0]) {
						cube(size = [71.0000000000, 41.0000000000, 20]);
					}
				}
			}
		}
		translate(v = [0, 0, 0.5000000000]) {
			translate(v = [0, -0.5000000000, 0]) {
				translate(v = [-0.5000000000, 0, 0]) {
					difference(){
						translate(v = [0, 0, 0]) {
							translate(v = [0, 0, 0]);
							difference() {
								translate(v = [0, 0, 0]) {
									cube(size = [81.0000000000, 51.0000000000, 1.0000000000]);
								}
							}
						}
						/* Holes Below*/
						translate(v = [0, 0, 0]){
							union(){
								translate(v = [0, 1.0000000000, 0]) {
									translate(v = [1.0000000000, 0, 0]) {
										translate(v = [0, 0, 0]) {
											cube(size = [79.0000000000, 49.0000000000, 1.0000000000]);
										}
									}
								}
							}
						} /* End Holes */ 
					}
				}
			}
		}
	}
	translate(v = [0, 0, 0]) {
		translate(v = [0, 0, 0]);
		union() {
			difference() {
				translate(v = [0, 0, 0]) {
					translate(v = [0, 0, 0]);
					translate(v = [0, 0, 0]) {
						cube(size = [5.0000000000, 5.0000000000, 30]);
					}
				}
				union() {
					translate(v = [0, 0, 0]) {
						cube(size = [0.5000000000, 0.5000000000, 30]);
					}
					translate(v = [0, 4.5000000000, 0]) {
						translate(v = [0, 0, 0]) {
							cube(size = [0.5000000000, 0.5000000000, 30]);
						}
					}
					translate(v = [4.5000000000, 0, 0]) {
						translate(v = [0, 0, 0]) {
							cube(size = [0.5000000000, 0.5000000000, 30]);
						}
					}
					translate(v = [4.5000000000, 0, 0]) {
						translate(v = [0, 4.5000000000, 0]) {
							translate(v = [0, 0, 0]) {
								cube(size = [0.5000000000, 0.5000000000, 30]);
							}
						}
					}
					translate(v = [2.5000000000, 0, 0]) {
						translate(v = [0, 2.5000000000, 0]) {
							translate(v = [0, 0, 10]) {
								translate(v = [0, 0, 0]) {
									linear_extrude(height = 20) {
										circle($fn = 48, r = 1.5500000000);
									}
								}
							}
						}
					}
				}
			}
			translate(v = [75.0000000000, 0, 0]) {
				translate(v = [0, 0, 0]) {
					difference() {
						translate(v = [0, 0, 0]) {
							translate(v = [0, 0, 0]);
							translate(v = [0, 0, 0]) {
								cube(size = [5.0000000000, 5.0000000000, 30]);
							}
						}
						union() {
							translate(v = [0, 0, 0]) {
								cube(size = [0.5000000000, 0.5000000000, 30]);
							}
							translate(v = [0, 4.5000000000, 0]) {
								translate(v = [0, 0, 0]) {
									cube(size = [0.5000000000, 0.5000000000, 30]);
								}
							}
							translate(v = [4.5000000000, 0, 0]) {
								translate(v = [0, 0, 0]) {
									cube(size = [0.5000000000, 0.5000000000, 30]);
								}
							}
							translate(v = [4.5000000000, 0, 0]) {
								translate(v = [0, 4.5000000000, 0]) {
									translate(v = [0, 0, 0]) {
										cube(size = [0.5000000000, 0.5000000000, 30]);
									}
								}
							}
							translate(v = [2.5000000000, 0, 0]) {
								translate(v = [0, 2.5000000000, 0]) {
									translate(v = [0, 0, 10]) {
										translate(v = [0, 0, 0]) {
											linear_extrude(height = 20) {
												circle($fn = 48, r = 1.5500000000);
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	translate(v = [0, 45.0000000000, 0]) {
		translate(v = [0, 0, 0]) {
			translate(v = [0, 0, 0]) {
				translate(v = [0, 0, 0]);
				union() {
					difference() {
						translate(v = [0, 0, 0]) {
							translate(v = [0, 0, 0]);
							translate(v = [0, 0, 0]) {
								cube(size = [5.0000000000, 5.0000000000, 30]);
							}
						}
						union() {
							translate(v = [0, 0, 0]) {
								cube(size = [0.5000000000, 0.5000000000, 30]);
							}
							translate(v = [0, 4.5000000000, 0]) {
								translate(v = [0, 0, 0]) {
									cube(size = [0.5000000000, 0.5000000000, 30]);
								}
							}
							translate(v = [4.5000000000, 0, 0]) {
								translate(v = [0, 0, 0]) {
									cube(size = [0.5000000000, 0.5000000000, 30]);
								}
							}
							translate(v = [4.5000000000, 0, 0]) {
								translate(v = [0, 4.5000000000, 0]) {
									translate(v = [0, 0, 0]) {
										cube(size = [0.5000000000, 0.5000000000, 30]);
									}
								}
							}
							translate(v = [2.5000000000, 0, 0]) {
								translate(v = [0, 2.5000000000, 0]) {
									translate(v = [0, 0, 10]) {
										translate(v = [0, 0, 0]) {
											linear_extrude(height = 20) {
												circle($fn = 48, r = 1.5500000000);
											}
										}
									}
								}
							}
						}
					}
					translate(v = [75.0000000000, 0, 0]) {
						translate(v = [0, 0, 0]) {
							difference() {
								translate(v = [0, 0, 0]) {
									translate(v = [0, 0, 0]);
									translate(v = [0, 0, 0]) {
										cube(size = [5.0000000000, 5.0000000000, 30]);
									}
								}
								union() {
									translate(v = [0, 0, 0]) {
										cube(size = [0.5000000000, 0.5000000000, 30]);
									}
									translate(v = [0, 4.5000000000, 0]) {
										translate(v = [0, 0, 0]) {
											cube(size = [0.5000000000, 0.5000000000, 30]);
										}
									}
									translate(v = [4.5000000000, 0, 0]) {
										translate(v = [0, 0, 0]) {
											cube(size = [0.5000000000, 0.5000000000, 30]);
										}
									}
									translate(v = [4.5000000000, 0, 0]) {
										translate(v = [0, 4.5000000000, 0]) {
											translate(v = [0, 0, 0]) {
												cube(size = [0.5000000000, 0.5000000000, 30]);
											}
										}
									}
									translate(v = [2.5000000000, 0, 0]) {
										translate(v = [0, 2.5000000000, 0]) {
											translate(v = [0, 0, 10]) {
												translate(v = [0, 0, 0]) {
													linear_extrude(height = 20) {
														circle($fn = 48, r = 1.5500000000);
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	translate(v = [0, 0, 1.0000000000]) {
		translate(v = [0, 0.5000000000, 0]) {
			translate(v = [0.5000000000, 0, 0]) {
				difference(){
					translate(v = [0, 0, 0]) {
						translate(v = [0, 0, 0]);
						difference() {
							translate(v = [0, 0, 0]) {
								cube(size = [79.0000000000, 49.0000000000, 1.0000000000]);
							}
						}
					}
					/* Holes Below*/
					translate(v = [0, 0, 0]){
						union(){
							translate(v = [0, 1.0000000000, 0]) {
								translate(v = [1.0000000000, 0, 0]) {
									translate(v = [0, 0, 0]) {
										cube(size = [77.0000000000, 47.0000000000, 1.0000000000]);
									}
								}
							}
						}
					} /* End Holes */ 
				}
			}
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
from typing import Tuple

from solid import OpenSCADObject, scad_render_to_file
from solid.objects import translate
from solid.utils import forward, hole, part, right, up

P3 = Tuple[float, float, float]
Vec3 = P3

SEGMENTS = 48


class SolidBuilder:
    def __init__(self, o: OpenSCADObject = None) -> None:
        self._oso = translate([0, 0, 0])
        self._oso.add(o)

    def set_translation(self, v: Vec3) -> "SolidBuilder":
        self._oso.add_param("v", v)
        return self

    def add(self, sb: "SolidBuilder") -> "SolidBuilder":
        self._oso.add(sb.render())
        return self

    def right(self, d: float) -> "SolidBuilder":
        self._oso = right(d)(self._oso)
        return self

    def forward(self, d: float) -> "SolidBuilder":
        self._oso = forward(d)(self._oso)
        return self

    def up(self, d: float) -> "SolidBuilder":
        self._oso = up(d)(self._oso)
        return self

    def hole(self, sb: "SolidBuilder") -> "SolidBuilder":
        self._oso = self._oso - hole()(sb._oso)
        return self

    def part(self) -> "SolidBuilder":
        self._oso = part()(self._oso)
        return self

    def render(self) -> OpenSCADObject:
        return self._oso

    def clone(self) -> "SolidBuilder":
        return SolidBuilder(self._oso.copy())

    def __add__(self, sb: "SolidBuilder") -> "SolidBuilder":
        self._oso += sb._oso
        return self

    def __sub__(self, sb: "SolidBuilder") -> "SolidBuilder":
        self._oso -= sb._oso
        return self

    def render_to_file(self, filepath):
        file_out = scad_render_to_file(
            self._oso, filepath=filepath, file_header=f"$fn = {SEGMENTS};"
        )
        print(f"{__file__}: SCAD file written to: \n{file_out}")


def node(o: OpenSCADObject) -> SolidBuilder:
    return SolidBuilder(o)


def empty() -> SolidBuilder:
    return node(translate([0, 0, 0]))
 
 
************************************************/
