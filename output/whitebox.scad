// Generated by SolidPython 0.4.2 on 2019-11-23 17:29:10
$fn = 48;

difference() {
	union() {
		translate(v = [0, -25.0000000000, 0]) {
			translate(v = [-40.0000000000, 0, 0]) {
				union() {
					translate(v = [0, 0, 0]) {
						cube(center = false, size = [40.0000000000, 25.0000000000, 1.0000000000]);
						translate(v = [0, 6, 0]) {
							translate(v = [20, 0, 0]) {
								difference(){
									translate(v = [0, 0, 0]) {
										difference() {
											linear_extrude(height = 10) {
												circle($fn = 48, r = 2.5000000000);
											}
										}
									}
									/* Holes Below*/
									translate(v = [0, 0, 0]){
										union(){
											linear_extrude(height = 10) {
												circle($fn = 48, r = 1.2500000000);
											}
										}
									} /* End Holes */ 
								}
							}
						}
					}
					translate(v = [1.0000000000, 0, 0]) {
						translate(v = [0, 1.0000000000, 0]) {
							cube(center = false, size = [40.0000000000, 3.0000000000, 5.0000000000]);
						}
					}
					translate(v = [0, 1.0000000000, 0]) {
						translate(v = [1.0000000000, 0, 0]) {
							cube(center = false, size = [3.0000000000, 25.0000000000, 5.0000000000]);
						}
					}
					translate(v = [1.0000000000, 0, 0]) {
						translate(v = [0, 1.0000000000, 0]) {
							union() {
								difference() {
									translate(v = [0, 0, 0]) {
										cube(center = false, size = [8, 8, 30]);
									}
									translate(v = [4.0000000000, 0, 0]) {
										translate(v = [0, 4.0000000000, 0]) {
											translate(v = [0, 0, 27.0000000000]) {
												linear_extrude(height = 3.0000000000) {
													circle($fn = 48, r = 3.5500000000);
												}
											}
										}
									}
									union() {
										translate(v = [0, 0, 22.6000000000]) {
											translate(v = [0, 4.0000000000, 0]) {
												translate(v = [4.0000000000, 0, 0]) {
													union() {
														linear_extrude(height = 3.4000000000) {
															circle($fn = 6, r = 3.2250000000);
														}
														translate(v = [0, 0, -5]) {
															linear_extrude(height = 10) {
																circle($fn = 48, r = 1.5500000000);
															}
														}
													}
												}
											}
										}
										translate(v = [0, 0, 22.6000000000]) {
											translate(v = [4.0000000000, 0, 0]) {
												translate(v = [0, 1.2500000000, 0]) {
													cube(center = false, size = [5.5000000000, 5.5000000000, 3.4000000000]);
												}
											}
										}
									}
								}
								translate(v = [-1, 0, 0]) {
									translate(v = [0, -1, 0]) {
										cube(center = false, size = [2.0000000000, 2.0000000000, 30]);
									}
								}
							}
						}
					}
				}
			}
		}
		mirror(v = [1, 0, 0]) {
			translate(v = [0, -25.0000000000, 0]) {
				translate(v = [-40.0000000000, 0, 0]) {
					union() {
						translate(v = [0, 0, 0]) {
							cube(center = false, size = [40.0000000000, 25.0000000000, 1.0000000000]);
							translate(v = [0, 6, 0]) {
								translate(v = [20, 0, 0]) {
									difference(){
										translate(v = [0, 0, 0]) {
											difference() {
												linear_extrude(height = 10) {
													circle($fn = 48, r = 2.5000000000);
												}
											}
										}
										/* Holes Below*/
										translate(v = [0, 0, 0]){
											union(){
												linear_extrude(height = 10) {
													circle($fn = 48, r = 1.2500000000);
												}
											}
										} /* End Holes */ 
									}
								}
							}
						}
						translate(v = [1.0000000000, 0, 0]) {
							translate(v = [0, 1.0000000000, 0]) {
								cube(center = false, size = [40.0000000000, 3.0000000000, 5.0000000000]);
							}
						}
						translate(v = [0, 1.0000000000, 0]) {
							translate(v = [1.0000000000, 0, 0]) {
								cube(center = false, size = [3.0000000000, 25.0000000000, 5.0000000000]);
							}
						}
						translate(v = [1.0000000000, 0, 0]) {
							translate(v = [0, 1.0000000000, 0]) {
								union() {
									difference() {
										translate(v = [0, 0, 0]) {
											cube(center = false, size = [8, 8, 30]);
										}
										translate(v = [4.0000000000, 0, 0]) {
											translate(v = [0, 4.0000000000, 0]) {
												translate(v = [0, 0, 27.0000000000]) {
													linear_extrude(height = 3.0000000000) {
														circle($fn = 48, r = 3.5500000000);
													}
												}
											}
										}
										union() {
											translate(v = [0, 0, 22.6000000000]) {
												translate(v = [0, 4.0000000000, 0]) {
													translate(v = [4.0000000000, 0, 0]) {
														union() {
															linear_extrude(height = 3.4000000000) {
																circle($fn = 6, r = 3.2250000000);
															}
															translate(v = [0, 0, -5]) {
																linear_extrude(height = 10) {
																	circle($fn = 48, r = 1.5500000000);
																}
															}
														}
													}
												}
											}
											translate(v = [0, 0, 22.6000000000]) {
												translate(v = [4.0000000000, 0, 0]) {
													translate(v = [0, 1.2500000000, 0]) {
														cube(center = false, size = [5.5000000000, 5.5000000000, 3.4000000000]);
													}
												}
											}
										}
									}
									translate(v = [-1, 0, 0]) {
										translate(v = [0, -1, 0]) {
											cube(center = false, size = [2.0000000000, 2.0000000000, 30]);
										}
									}
								}
							}
						}
					}
				}
			}
		}
		mirror(v = [0, 1, 0]) {
			union() {
				translate(v = [0, -25.0000000000, 0]) {
					translate(v = [-40.0000000000, 0, 0]) {
						union() {
							translate(v = [0, 0, 0]) {
								cube(center = false, size = [40.0000000000, 25.0000000000, 1.0000000000]);
								translate(v = [0, 6, 0]) {
									translate(v = [20, 0, 0]) {
										difference(){
											translate(v = [0, 0, 0]) {
												difference() {
													linear_extrude(height = 10) {
														circle($fn = 48, r = 2.5000000000);
													}
												}
											}
											/* Holes Below*/
											translate(v = [0, 0, 0]){
												union(){
													linear_extrude(height = 10) {
														circle($fn = 48, r = 1.2500000000);
													}
												}
											} /* End Holes */ 
										}
									}
								}
							}
							translate(v = [1.0000000000, 0, 0]) {
								translate(v = [0, 1.0000000000, 0]) {
									cube(center = false, size = [40.0000000000, 3.0000000000, 5.0000000000]);
								}
							}
							translate(v = [0, 1.0000000000, 0]) {
								translate(v = [1.0000000000, 0, 0]) {
									cube(center = false, size = [3.0000000000, 25.0000000000, 5.0000000000]);
								}
							}
							translate(v = [1.0000000000, 0, 0]) {
								translate(v = [0, 1.0000000000, 0]) {
									union() {
										difference() {
											translate(v = [0, 0, 0]) {
												cube(center = false, size = [8, 8, 30]);
											}
											translate(v = [4.0000000000, 0, 0]) {
												translate(v = [0, 4.0000000000, 0]) {
													translate(v = [0, 0, 27.0000000000]) {
														linear_extrude(height = 3.0000000000) {
															circle($fn = 48, r = 3.5500000000);
														}
													}
												}
											}
											union() {
												translate(v = [0, 0, 22.6000000000]) {
													translate(v = [0, 4.0000000000, 0]) {
														translate(v = [4.0000000000, 0, 0]) {
															union() {
																linear_extrude(height = 3.4000000000) {
																	circle($fn = 6, r = 3.2250000000);
																}
																translate(v = [0, 0, -5]) {
																	linear_extrude(height = 10) {
																		circle($fn = 48, r = 1.5500000000);
																	}
																}
															}
														}
													}
												}
												translate(v = [0, 0, 22.6000000000]) {
													translate(v = [4.0000000000, 0, 0]) {
														translate(v = [0, 1.2500000000, 0]) {
															cube(center = false, size = [5.5000000000, 5.5000000000, 3.4000000000]);
														}
													}
												}
											}
										}
										translate(v = [-1, 0, 0]) {
											translate(v = [0, -1, 0]) {
												cube(center = false, size = [2.0000000000, 2.0000000000, 30]);
											}
										}
									}
								}
							}
						}
					}
				}
				mirror(v = [1, 0, 0]) {
					translate(v = [0, -25.0000000000, 0]) {
						translate(v = [-40.0000000000, 0, 0]) {
							union() {
								translate(v = [0, 0, 0]) {
									cube(center = false, size = [40.0000000000, 25.0000000000, 1.0000000000]);
									translate(v = [0, 6, 0]) {
										translate(v = [20, 0, 0]) {
											difference(){
												translate(v = [0, 0, 0]) {
													difference() {
														linear_extrude(height = 10) {
															circle($fn = 48, r = 2.5000000000);
														}
													}
												}
												/* Holes Below*/
												translate(v = [0, 0, 0]){
													union(){
														linear_extrude(height = 10) {
															circle($fn = 48, r = 1.2500000000);
														}
													}
												} /* End Holes */ 
											}
										}
									}
								}
								translate(v = [1.0000000000, 0, 0]) {
									translate(v = [0, 1.0000000000, 0]) {
										cube(center = false, size = [40.0000000000, 3.0000000000, 5.0000000000]);
									}
								}
								translate(v = [0, 1.0000000000, 0]) {
									translate(v = [1.0000000000, 0, 0]) {
										cube(center = false, size = [3.0000000000, 25.0000000000, 5.0000000000]);
									}
								}
								translate(v = [1.0000000000, 0, 0]) {
									translate(v = [0, 1.0000000000, 0]) {
										union() {
											difference() {
												translate(v = [0, 0, 0]) {
													cube(center = false, size = [8, 8, 30]);
												}
												translate(v = [4.0000000000, 0, 0]) {
													translate(v = [0, 4.0000000000, 0]) {
														translate(v = [0, 0, 27.0000000000]) {
															linear_extrude(height = 3.0000000000) {
																circle($fn = 48, r = 3.5500000000);
															}
														}
													}
												}
												union() {
													translate(v = [0, 0, 22.6000000000]) {
														translate(v = [0, 4.0000000000, 0]) {
															translate(v = [4.0000000000, 0, 0]) {
																union() {
																	linear_extrude(height = 3.4000000000) {
																		circle($fn = 6, r = 3.2250000000);
																	}
																	translate(v = [0, 0, -5]) {
																		linear_extrude(height = 10) {
																			circle($fn = 48, r = 1.5500000000);
																		}
																	}
																}
															}
														}
													}
													translate(v = [0, 0, 22.6000000000]) {
														translate(v = [4.0000000000, 0, 0]) {
															translate(v = [0, 1.2500000000, 0]) {
																cube(center = false, size = [5.5000000000, 5.5000000000, 3.4000000000]);
															}
														}
													}
												}
											}
											translate(v = [-1, 0, 0]) {
												translate(v = [0, -1, 0]) {
													cube(center = false, size = [2.0000000000, 2.0000000000, 30]);
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	union() {
		translate(v = [-3.2000000000, 0, 0]) {
			translate(v = [0, 0, 3.0000000000]) {
				cube(center = true, size = [59.4000000000, 29.4000000000, 5.0000000000]);
			}
		}
		translate(v = [0, 0, 0]) {
			cube(center = true, size = [48.6000000000, 23.9000000000, 5.0000000000]);
		}
		translate(v = [-34.8500000000, 0, 0]) {
			translate(v = [0, 0, 3.0000000000]) {
				cube(center = true, size = [4.1000000000, 18.1000000000, 5.0000000000]);
			}
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
from typing import Tuple

from solid import OpenSCADObject, scad_render_to_file
from solid.objects import hull, minkowski, mirror, rotate, translate
from solid.utils import back, down, forward, hole, left, part, right, up

P3 = Tuple[float, float, float]
Vec3 = P3

SEGMENTS = 48


class SolidBuilder:
    def __init__(self, o: OpenSCADObject = None) -> None:
        if o is None:
            self._oso = translate([0, 0, 0])
        else:
            self._oso = o

    def add(self, sb: "SolidBuilder") -> "SolidBuilder":
        self._oso.add(sb.render())
        return self

    def right(self, d: float) -> "SolidBuilder":
        self._oso = right(d)(self._oso)
        return self

    def left(self, d: float) -> "SolidBuilder":
        self._oso = left(d)(self._oso)
        return self

    def forward(self, d: float) -> "SolidBuilder":
        self._oso = forward(d)(self._oso)
        return self

    def back(self, d: float) -> "SolidBuilder":
        self._oso = back(d)(self._oso)
        return self

    def up(self, d: float) -> "SolidBuilder":
        self._oso = up(d)(self._oso)
        return self

    def down(self, d: float) -> "SolidBuilder":
        self._oso = down(d)(self._oso)
        return self

    def hole(self, sb: "SolidBuilder") -> "SolidBuilder":
        self._oso = self._oso - hole()(sb._oso)
        return self

    def part(self) -> "SolidBuilder":
        self._oso = part()(self._oso)
        return self

    def translate(self, v: Vec3) -> "SolidBuilder":
        self._oso = translate(v)(self._oso)
        return self

    def minkowski(self) -> "SolidBuilder":
        self._oso = minkowski()(self._oso)
        return self

    def hull(self) -> "SolidBuilder":
        self._oso = hull()(self._oso)
        return self

    def mirror(self, v) -> "SolidBuilder":
        self._oso = mirror(v)(self._oso)
        return self

    def mirror_clone(self, v, clone=True) -> "SolidBuilder":
        if clone:
            self += self.clone().mirror(v)
            return self
        else:
            return self.mirror(v=[1, 0, 0])

    def reflect_x(self, clone: bool = True) -> "SolidBuilder":
        return self.mirror_clone(v=[1, 0, 0], clone=clone)

    def reflect_y(self, clone: bool = True) -> "SolidBuilder":
        return self.mirror_clone(v=[0, 1, 0], clone=clone)

    def reflect_z(self, clone: bool = True) -> "SolidBuilder":
        return self.mirror_clone(v=[0, 0, 1], clone=clone)

    def rotate(self, a: float, v) -> "SolidBuilder":
        self._oso = rotate(a, v)(self._oso)
        return self

    def render(self) -> OpenSCADObject:
        return self._oso

    def clone(self) -> "SolidBuilder":
        return SolidBuilder(self._oso.copy())

    def __add__(self, sb: "SolidBuilder") -> "SolidBuilder":
        self._oso += sb._oso
        return self

    def __sub__(self, sb: "SolidBuilder") -> "SolidBuilder":
        self._oso -= sb._oso
        return self

    def render_to_file(self, filepath):
        file_out = scad_render_to_file(
            self._oso, filepath=filepath, file_header=f"$fn = {SEGMENTS};"
        )
        print(f"{__file__}: SCAD file written to: \n{file_out}")


def node(o: OpenSCADObject) -> SolidBuilder:
    return SolidBuilder(o)


def empty() -> SolidBuilder:
    # return node(translate([0, 0, 0]))
    return node(None)
 
 
************************************************/
